export default {
    tagStart: /<([\w]+)>/g,
    tagEnd: /<\/>/g,
    tagSeparator: "*",
    text: [
        "<TEXT>",
        "require \"test\"",
        "CONSTANT <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>=</> 777",
        "",
        "# Sample comment",
        "",
        "<RUBY_KEYWORD*DEFAULT_KEYWORD>class</> Module::Class",
        "  include Testcase",
        "",
        "  render :action => \'foo\'",
        "  <RUBY_KEYWORD*DEFAULT_KEYWORD>def</> foo(parameter)",
        "    @parameter <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>=</> parameter",
        "  <RUBY_KEYWORD*DEFAULT_KEYWORD>end</>",
        "",
        "  local_var <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>=</> eval <<-\"FOO\";\\",
        "  printIndex \"Hello world!\"",
        "  And now this is heredoc!",
        "  printIndex \"Hello world again!\"",
        "  FOO",
        "  foo(\"#{$GLOBAL_TIME <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>>></> $`} is \\Z sample \\\"string\\\"\" <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>*</> 777);",
        "  <RUBY_KEYWORD*DEFAULT_KEYWORD>if</> ($1 <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>=~</> /sample regular expression/ni) <RUBY_KEYWORD*DEFAULT_KEYWORD>then</>",
        "  <RUBY_KEYWORD*DEFAULT_KEYWORD>begin</>",
        "    puts %W(sample words), CONSTANT, :fooo;",
        "    do_something :action => \"action\"",
        "  <RUBY_KEYWORD*DEFAULT_KEYWORD>end</>",
        "  expect{counter[0]}.to_be eq 1",
        "  1.upto(@@n) <RUBY_KEYWORD*DEFAULT_KEYWORD>do</> <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>|</>index<RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>|</> printIndex \'Hello\' <RUBY_OPERATION_SIGN*DEFAULT_OPERATION_SIGN>+</> index <RUBY_KEYWORD*DEFAULT_KEYWORD>end</>",
        "  \\\\\\\\\\\\\\\\\\\\",
        "  <RUBY_KEYWORD*DEFAULT_KEYWORD>end</>",
        "<RUBY_KEYWORD*DEFAULT_KEYWORD>end</>",
        "</>"
    ].join("\n")
}
